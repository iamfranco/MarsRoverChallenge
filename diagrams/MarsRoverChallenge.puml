@startuml "Mars Rover Challenge"
skinparam classAttributeIconSize 0

class AskUser <<static>>
{
  + AskUserToMakePlateau(\n\
      commandHandler : CommandHandler, \n\
      plateauMakers : Dictionary<string, Func<PlateauBase>> \n\
    ) : PlateauBase
  
  + AskUserToMakeObstacles(\n\
      positionStringConverter : IPositionStringConverter, \n\
      commandHandler : CommandHandler, \n\
      plateau : PlateauBase \n\
    ) : void
  
  + AskUserToCreateNewVehicleOrConnectToExistingVehicle( \n\
      positionStringConverter : IPositionStringConverter, \n\
      commandHandler : CommandHandler, \n\
      plateau : PlateauBase, \n\
      vehicleMakers : Dictionary<string, Func<Position, VehicleBase>> \n\
    ) : void

  + AskUserForMovementInstructionAndSendToVehicle( \n\
      instructionReader : IInstructionReader, \n\
      commandHandler : CommandHandler, \n\
      plateau : PlateauBase \n\
    ) : void
  
  + AskUntilValidStringInput(\n\
      prompt : string, \n\
      validationFunc : Func<string, bool> \n\
    ) : string
}

class CommandHandler
{
  - instructionReader : IInstructionReader
  - positionStringConverter : IPositionStringConverter
  - plateau : PlateauBase
  - vehicle : VehicleBase
  - RecentPath : List<Position>

  + CommandHandler(instructionReader : IInstructionReader, positionStringConverter : IPositionStringConverter)
  
  + ConnectPlateau(plateau : PlateauBase) : void

  + GetVehicle() : VehicleBase?
  + AddVehicleToPlateau(vehicle : VehicleBase) : void
  + ConnectToVehicleAtCoordinates(coordinates : Coordinates) : void
  + SendMoveInstruction(instruction : string) : string

  + GetPositionString() : string
  + GetRecentPath() : List<Position>
  + ResetRecentPath() : void
}

interface IInstructionReader <<interface>>
{
  + GetExampleInstructionString() : string
  + IsValidInstruction(instruction : string) : bool
  + EvaluateInstruction(instruction : string) : List<SingularInstruction>
}

enum SingularInstruction
{
  TurnLeft
  TurnRight
  MoveForward
}

class StandardInstructionReader
{
  + GetExampleInstructionString() : string
  + IsValidInstruction(instruction : string) : bool
  + EvaluateInstruction(instruction : string) : List<SingularInstruction>
}

class ObstaclesContainer
{
  - obstacleCoordinates : List<Coordinates>
  - coordinateValidateFunc : Func<Coordinates, bool>

  + ObstaclesContainer(coordinateValidateFunc : Func<Coordinates, bool>)

  + GetObstacleCoordinates() : List<Coordinates>
  + AddObstacle(obstacleCoordinate: Coordinates) : void
  + RemoveObstacle(obstaclecoordinate : Coordinates) : void
}

abstract PlateauBase <<abstract>>
{
  - obstaclesContainer : ObstaclesContainer
  - vehiclesContainer : VehiclesContainer

  + GetObstaclesContainer() : ObstaclesContainer
  + GetVehiclesContainer() : VehiclesContainer

  + IsCoordinateValidInPlateau(coordinates : Coordinates) : bool
  {abstract} + PrintMap(recentPath : List<Position>) : void
  {abstract} # IsCoordinateWithinPlateauBoundary(coordinates : Coordinates) : bool
  # PrintMap(recentPath : List<Position>, maxCoordinates : Coordinates) : void
}

class RectangularPlateau
{
  - maximumCoordinates : Coordinates

  + RectangularPlateau(maximumCoordinates : Coordinates)

  + PrintMap(recentPath : List<Position>) : void
  # IsCoordinateWithinPlateauBoundary(coordinates : Coordinates) : bool
}

class VehiclesContainer
{
  - vehicles : List<VehicleBase>
  - coordinateValidateFunc : Func<Coordinates, bool>

  + VehiclesContainer(coordinateValidateFunc : Func<Coordinates, bool>)

  + GetVehicles() : List<VehicleBase>
  + GetVehicleAtCoordinates(coordinates : Coordinates) : VehicleBase?
  + AddVehicle(vehicle : VehicleBase) : void
  + RemoveVehicle(vehicle : VehicleBase) : void
}

class Coordinates <<struct>>
{
  - x : int
  - y : int

  + GetX() : int
  + GetY() : int

  + operator+(a : Coordinates, b : Coordinates) : Coordinates
}

enum Direction
{
  North
  East
  South
  West

  + GetMovementVector() : Coordinates
  + GetLeftTurn() : Direction
  + GetRightTurn() : Direction
}

interface IPositionStringConverter <<interface>>
{
  + GetExamplePositionString() : string
  + GetExampleCoordinateString() : string

  + IsValidPositionString(positionString : string) : bool
  + IsValidCoordinateString(coordinateString : string) : bool

  + ToPosition(positionString : string) : Position
  + ToCoordinates(coordinateString : string) : Coordinates

  + ToPositionString(position : Position) : string
}

class Position <<struct>>
{
  - coordinates : Coordinates
  - direction : Direction

  + GetCoordinates() : Coordinates
  + GetDirection() : Direction
}

class StandardPositionStringConverter
{
  + GetExamplePositionString() : string
  + GetExampleCoordinateString() : string

  + IsValidPositionString(positionString : string) : bool
  + IsValidCoordinateString(coordinateString : string) : bool

  + ToPosition(positionString : string) : Position
  + ToCoordinates(coordinateString : string) : Coordinates

  + ToPositionString(position : Position) : string
}

class Rover
{
  + Rover(initialPosition : Position)

  + TakePhotoAndSendToStation() : void
  + CollectSample() : void
}

abstract VehicleBase <<abstract>>
{
  - position : Position

  + VehicleBase(initialPosition : Position)

  + GetPosition() : Position
  + ApplyMoveInstruction(instruction : List<SingularInstruction>, \n\
    plateau : PlateauBase \n\
    ) : (List<Position>, bool)
}

AskUser --> CommandHandler
AskUser --[norank]--> PlateauBase
AskUser --[norank]--> IPositionStringConverter
AskUser --l[norank]--> IInstructionReader
AskUser --l[norank]--> VehicleBase

CommandHandler o-- IInstructionReader
CommandHandler o-- IPositionStringConverter
CommandHandler o-- PlateauBase
CommandHandler o-- VehicleBase
CommandHandler o----- Position

IInstructionReader <|.. StandardInstructionReader 

VehicleBase <|-- Rover
VehicleBase o--- Position

IPositionStringConverter <|.. StandardPositionStringConverter

PlateauBase *-- ObstaclesContainer
PlateauBase *-- VehiclesContainer
PlateauBase <|--- RectangularPlateau

ObstaclesContainer o---- Coordinates
VehiclesContainer o-u- VehicleBase

Position o-- Direction
Position o-- Coordinates

IInstructionReader --> SingularInstruction
VehicleBase --> SingularInstruction

RectangularPlateau o-[norank]- Coordinates

@enduml