@startuml "Mars Rover Challenge"
skinparam classAttributeIconSize 0

class CommandHandler
{
  - instructionReader : IInstructionReader
  - positionStringConverter : IPositionStringConverter
  - vehicle : VehicleBase
  - RecentPath : List<Position>

  + CommandHandler(instructionReader : IInstructionReader, positionStringConverter : IPositionStringConverter)
  
  + GetRecentPath() : List<Position>

  + ConnectVehicle(vehicle : VehicleBase)
  + DisconnectVehicle()

  + RequestPosition() : string
  + SendMoveInstruction(instruction : string) : (bool, string)
}

interface IInstructionReader <<interface>>
{
  + IsValidInstruction(instruction : string) : bool
  + EvaluateInstruction(instruction : string) : List<SingularInstruction>
}

enum SingularInstruction
{
  TurnLeft
  TurnRight
  MoveForward
}

class StandardInstructionReader
{
  + IsValidInstruction(instruction : string) : bool
  + EvaluateInstruction(instruction : string) : List<SingularInstruction>
}

abstract PlateauBase <<abstract>>
{
  - obstacleCoordinates : List<Coordinates>

  + GetObstacleCoordinates() : List<Coordinates>
  + AddObstacle(obstacleCoordinate: Coordinates)
  + RemoveObstacle(obstacleCoordinate: Coordinates)
  {abstract} + IsCoordinateValidInPlateau(coordinates : Coordinates) : bool
  {abstract} + PrintMap(recentPath : List<Position>) : void
}

class RectangularPlateau
{
  + plateauSize : Coordinates

  + RectangularPlateau(plateauSize : Coordinates)

  + IsCoordinateValidInPlateau(coordinates : Coordinates) : bool
  + PrintMap(recentPath : List<Position>) : void
}

class Coordinates
{
  + x : int
  + y : int

  + operator+(a : Coordinates, b : Coordinates) : Coordinates
}

enum Direction
{
  North
  East
  South
  West

  + GetMovementVector() : Coordinates
  + GetLeftTurn() : Direction
  + GetRightTurn() : Direction
}

interface IPositionStringConverter <<interface>>
{
  + IsValidPositionString(positionString : string) : bool
  + IsValidCoordinateString(coordinateString : string) : bool

  + ToPosition(positionString : string) : Position
  + ToCoordinates(coordinateString : string) : Coordinates

  + ToPositionString(position : Position) : string
}

class Position
{
  + coordinates : Coordinates
  + direction : Direction
}

class PositionStringConverter
{
  + IsValidPositionString(positionString : string) : bool
  + IsValidCoordinateString(coordinateString : string) : bool

  + ToPosition(positionString : string) : Position
  + ToCoordinates(coordinateString : string) : Coordinates

  + ToPositionString(position : Position) : string
}

class Rover
{
  + Rover(initialPosition : Position, plateau : PlateauBase)

  + TakePhotoAndSendToStation() : void
  + CollectSample() : void
}

abstract VehicleBase <<abstract>>
{
  - position : Position
  - plateau : PlateauBase

  + VehicleBase(initialPosition : Position, plateau : PlateauBase)

  + GetPosition() : Position
  + GetPlateau() : PlateauBase
  + ApplyMoveInstruction(instruction : List<SingularInstruction>) : void
}

CommandHandler o-- IInstructionReader
CommandHandler o-- IPositionStringConverter
CommandHandler o-- VehicleBase
CommandHandler o---- Position

IInstructionReader --> SingularInstruction
IInstructionReader <|.. StandardInstructionReader 

VehicleBase <|-u- Rover
VehicleBase --> SingularInstruction
VehicleBase o--- Position
VehicleBase o-- PlateauBase

IPositionStringConverter <|..... PositionStringConverter
IPositionStringConverter ---> Position
IPositionStringConverter ----> Coordinates

PlateauBase <|----- RectangularPlateau
PlateauBase ---> Position
PlateauBase o--- Coordinates

Direction --> Coordinates 

Position o-- Direction
Position o-- Coordinates

@enduml