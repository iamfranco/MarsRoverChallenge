@startuml "Mars Rover Challenge"
skinparam classAttributeIconSize 0

class MapPrinter
{
  + PrintMap(appController : AppController) : void
}

class AppUIHandler
{
  - positionStringConverter : IPositionStringConverter
  - appController : AppController
  - mapPrinter : MapPrinter

  + AppUIHandler(positionStringConverter : IPositionStringConverter, appController : AppController, mapPrinter : MapPrinter)

  + AskUserToMakePlateau(plateauMakers : Dictionary<string, Func<PlateauBase>>) : void
  
  + AskUserToMakeObstacles() : void

  + AskUserToCreateNewVehicleOrConnectToExistingVehicle(vehicleMakers : Dictionary<string, Func<Position, VehicleBase>>) : void

  + AskUserForMovementInstructionAndSendToVehicle() : void
}

class ConsoleApp
{
  + Run(appUIHandler : AppUIHandler, \n\
      plateauMakers : Dictionary<string, Func<PlateauBase>>, \n\
      vehicleMakers : Dictionary<string, Func<Position, VehicleBase>> \n\
    ) : void
}

enum VehicleMovementStatus
{
  NoMovement
  DangerAhead
  ReachedDestination
} 

class AppController
{
  - instructionReader : IInstructionReader
  - plateau : PlateauBase?
  - vehicle : VehicleBase?
  - recentPath : List<Position>

  + AppController(instructionReader : IInstructionReader)
  
  + GetInstructionReader() : IInstructionReader
  + GetPlateau() : PlateauBase?
  + GetVehicle() : VehicleBase?
  + GetRecentPath() : List<Position>

  + ConnectPlateau(plateau : PlateauBase) : void
  + AddObstacleToPlateau(obstacle : Coordinates) : void
  + IsCoordinateValidInPlateau(coordinates : Coordinates) : void

  + AddVehicleToPlateau(vehicle : VehicleBase) : void
  + ConnectToVehicleAtCoordinates(coordinates : Coordinates) : void
  + DisconnectVehicle() : void

  + SendMoveInstruction(instruction : string) : VehicleMovementStatus
}

enum SingularInstruction
{
  TurnLeft
  TurnRight
  MoveForward
}

interface IInstructionReader <<interface>>
{
  + GetExampleInstructionString() : string
  + IsValidInstruction(instruction : string) : bool
  + EvaluateInstruction(instruction : string) : List<SingularInstruction>
}

class StandardInstructionReader
{
  + GetExampleInstructionString() : string
  + IsValidInstruction(instruction : string) : bool
  + EvaluateInstruction(instruction : string) : List<SingularInstruction>
}

class ObstaclesContainer
{
  - obstacleCoordinates : List<Coordinates>
  - coordinateValidateFunc : Func<Coordinates, bool>

  + ObstaclesContainer(coordinateValidateFunc : Func<Coordinates, bool>)

  + GetObstacleCoordinates() : List<Coordinates>
  + AddObstacle(obstacleCoordinate: Coordinates) : void
  + RemoveObstacle(obstaclecoordinate : Coordinates) : void
}

class VehiclesContainer
{
  - vehicles : List<VehicleBase>
  - coordinateValidateFunc : Func<Coordinates, bool>

  + VehiclesContainer(coordinateValidateFunc : Func<Coordinates, bool>)

  + GetVehicles() : List<VehicleBase>
  + GetVehicleAtCoordinates(coordinates : Coordinates) : VehicleBase?
  + AddVehicle(vehicle : VehicleBase) : void
  + RemoveVehicle(vehicle : VehicleBase) : void
}

abstract PlateauBase <<abstract>>
{
  - obstaclesContainer : ObstaclesContainer
  - vehiclesContainer : VehiclesContainer

  + GetObstaclesContainer() : ObstaclesContainer
  + GetVehiclesContainer() : VehiclesContainer

  {abstract} + GetMaximumCoordinates() : Coordinates
  {abstract} + GetMinimumCoordinates() : Coordinates

  + IsCoordinateValidInPlateau(coordinates : Coordinates) : bool
  {abstract} # IsCoordinateWithinPlateauBoundary(coordinates : Coordinates) : bool
}

class RectangularPlateau
{
  + GetMaximumCoordinates() : Coordinates
  + GetMinimumCoordinates() : Coordinates

  + RectangularPlateau(maximumCoordinates : Coordinates)

  # IsCoordinateWithinPlateauBoundary(coordinates : Coordinates) : bool
}

class Coordinates <<struct>>
{
  - x : int
  - y : int

  + GetX() : int
  + GetY() : int

  + operator+(a : Coordinates, b : Coordinates) : Coordinates
  + operator-(a : Coordinates, b : Coordinates) : Coordinates
}

enum Direction
{
  North
  East
  South
  West

  + GetMovementVector() : Coordinates
  + GetLeftTurn() : Direction
  + GetRightTurn() : Direction
}

class Position <<struct>>
{
  - coordinates : Coordinates
  - direction : Direction

  + GetCoordinates() : Coordinates
  + GetDirection() : Direction
}

interface IPositionStringConverter <<interface>>
{
  + GetExamplePositionString() : string
  + GetExampleCoordinateString() : string

  + IsValidPositionString(positionString : string) : bool
  + IsValidCoordinateString(coordinateString : string) : bool

  + ToPosition(positionString : string) : Position
  + ToCoordinates(coordinateString : string) : Coordinates

  + ToPositionString(position : Position) : string
}

class StandardPositionStringConverter
{
  + GetExamplePositionString() : string
  + GetExampleCoordinateString() : string

  + IsValidPositionString(positionString : string) : bool
  + IsValidCoordinateString(coordinateString : string) : bool

  + ToPosition(positionString : string) : Position
  + ToCoordinates(coordinateString : string) : Coordinates

  + ToPositionString(position : Position) : string
}

class Rover
{
  + Rover(initialPosition : Position)

  + TakePhotoAndSendToStation() : void
  + CollectSample() : void
}

abstract VehicleBase <<abstract>>
{
  - position : Position

  + VehicleBase(initialPosition : Position)

  + GetPosition() : Position
  + ApplyMoveInstruction(
      instruction : List<SingularInstruction>, \n\
      plateau : PlateauBase \n\
    ) : (List<Position>, bool)
}

ConsoleApp -> AppUIHandler
Program_cs -> ConsoleApp

note bottom of Program_cs

IPositionStringConverter positionStringConverter = ...
IInstructionReader instructionReader = ...
MapPrinter mapPrinter = ...

Dictionary<string, Func<PlateauBase>> plateauMakers = new() { ... }
Dictionary<string, Func<Position, VehicleBase>> vehicleMakers = new() { ... }

AppController appController = new(instructionReader);
AppUIHandler appUIHandler = new(positionStringConverter, appController, mapPrinter);

ConsoleApp.Run(appUIHandler, plateauMakers, vehicleMakers);

end note

AppUIHandler o--- AppController
AppUIHandler o-- MapPrinter
AppUIHandler o---- IPositionStringConverter
AppUIHandler --> VehicleMovementStatus

MapPrinter ---> AppController

AppController o-- IInstructionReader
AppController o-- PlateauBase
AppController o-- VehicleBase
AppController o----- Position
AppController -u-> VehicleMovementStatus

IInstructionReader <|.. StandardInstructionReader 

VehicleBase <|-- Rover
VehicleBase o--- Position

IPositionStringConverter <|.. StandardPositionStringConverter

PlateauBase *-- ObstaclesContainer
PlateauBase *-- VehiclesContainer
PlateauBase <|--- RectangularPlateau

ObstaclesContainer o---- Coordinates
VehiclesContainer o-u- VehicleBase

Position o-- Direction
Position o-- Coordinates

IInstructionReader --> SingularInstruction
VehicleBase --> SingularInstruction

RectangularPlateau o-[norank]- Coordinates

@enduml