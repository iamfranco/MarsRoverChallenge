@startuml "Mars Rover Challenge"
skinparam classAttributeIconSize 0

interface IInstructionReader <<interface>>
{
  + IsValidInstruction(instruction : string) : bool
  + EvaluateInstruction(instruction : string) : List<SingularInstruction>
}

enum SingularInstruction
{
  TurnLeft
  TurnRight
  MoveForward
}

class StandardInstructionReader
{
  + IsValidInstruction(instruction : string) : bool
  + EvaluateInstruction(instruction : string) : List<SingularInstruction>
}

abstract PlateauBase <<abstract>>
{
  - obstacleCoordinates : List<Coordinates>

  + GetObstacleCoordinates() : List<Coordinates>
  + AddObstacle(obstacleCoordinate: Coordinates)
  + RemoveObstacle(obstacleCoordinate: Coordinates)
  {abstract} + IsCoordinateValidInPlateau(coordinates : Coordinates) : bool
}

class RectangularPlateau
{
  + plateauSize : Coordinates

  + RectangularPlateau(plateauSize : Coordinates)

  + IsCoordinateValidInPlateau(coordinates : Coordinates) : bool
}

class Coordinates
{
  + x : int
  + y : int
}

class Direction
{
  - directions : List< &#40;string, Coordinates&#41; >
  - directionIndex : int

  + GetName() : string
  + GetMovementVector() : Coordinates
  + TurnLeft() : void
  + TurnRight() : void
}

interface IPositionStringConverter <<interface>>
{
  + IsValidPositionString(position : string) : bool
  + IsValidCoordinateString(coordinateString : string) : bool

  + ToCoordinatesDirection(position : string) : (Coordinates, Direction)
  + ToCoordinates(coordinateString : string) : Coordinates

  + ToPositionString(coordinates : Coordinates, direction : Direction) : string
}

class PositionStringConverter
{
  + IsValidPositionString(position : string) : bool
  + IsValidCoordinateString(coordinateString : string) : bool

  + ToCoordinatesDirection(position : string) : (Coordinates, Direction)
  + ToCoordinates(coordinateString : string) : Coordinates

  + ToPositionString(coordinates : Coordinates, direction : Direction) : string
}

abstract VehicleBase <<abstract>>
{
  - coordinates : Coordinates
  - direction : Direction

  + VehicleBase(initialCoordinates : Coordinates, initialDirection : Direction)

  + GetCoordinates() : Coordinates
  + GetDirection() : Direction
  + ApplyMoveInstruction(instruction : List<SingularInstruction>) : void
  + TeleportToPosition(coordinates : Coordinates, direction : Direction) : void
}

class Rover
{
  + Rover(initialCoordinates : Coordinates, initialDirection : Direction)

  + TakePhotoAndSendToStation() : void
  + CollectSample() : void
}

class CommandHandler
{
  - instructionReader : IInstructionReader
  - positionStringConverter : IPositionStringConverter
  - vehicle : VehicleBase
  - plateau : PlateauBase

  + CommandHandler(instructionReader : IInstructionReader, positionStringConverter : IPositionStringConverter)
  
  + ConnectVehicle(vehicle : VehicleBase)
  + DisconnectVehicle()

  + ConnectPlateau(plateau : PlateauBase)
  + DisconnectPlateau()

  + RequestPosition() : string
  + SendMoveInstruction(instruction : string)
}

CommandHandler o-- IInstructionReader
CommandHandler o-- IPositionStringConverter
CommandHandler o-- VehicleBase
CommandHandler o-- PlateauBase

IInstructionReader --> SingularInstruction
IInstructionReader <|.. StandardInstructionReader 

VehicleBase <|-u- Rover
VehicleBase --> SingularInstruction
VehicleBase o--- Direction
VehicleBase o---- Coordinates

IPositionStringConverter <|.. PositionStringConverter
IPositionStringConverter ---> Direction
IPositionStringConverter ----> Coordinates

PlateauBase <|-u- RectangularPlateau
PlateauBase -----> Coordinates

Direction --> Coordinates 

@enduml