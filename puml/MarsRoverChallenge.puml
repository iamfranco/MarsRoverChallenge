@startuml "Mars Rover Challenge"
skinparam classAttributeIconSize 0

interface IInstructionReader <<interface>>
{
  + IsValidInstruction(instruction : string) : bool
  + EvaluateInstruction(instruction : string) : List<SingularInstruction>
}

enum SingularInstruction
{
  TurnLeft
  TurnRight
  MoveForward
}

class StandardInstructionReader
{
  + IsValidInstruction(instruction : string) : bool
  + EvaluateInstruction(instruction : string) : List<SingularInstruction>
}

abstract PlateauBase <<abstract>>
{
  - obstacleCoordinates : List<Coordinates>

  + GetObstacleCoordinates() : List<Coordinates>
  + AddObstacle(obstacleCoordinate: Coordinates)
  + RemoveObstacle(obstacleCoordinate: Coordinates)
  {abstract} + IsCoordinateValidInPlateau(coordinates : Coordinates) : bool
}

class RectangularPlateau
{
  + plateauSize : Coordinates

  + RectangularPlateau(plateauSize : Coordinates)

  + IsCoordinateValidInPlateau(coordinates : Coordinates) : bool
}

class Coordinates
{
  + x : int
  + y : int
}

class Direction
{
  - directions : List< &#40;string, Coordinates&#41; >
  - directionIndex : int

  + GetName() : string
  + GetMovementVector() : Coordinates
  + TurnLeft() : void
  + TurnRight() : void
}

interface IPositionStringConverter <<interface>>
{
  + IsValidPositionString(position : string) : bool
  + IsValidCoordinateString(coordinateString : string) : bool

  + ToCoordinatesDirection(position : string) : (Coordinates, Direction)
  + ToCoordinates(coordinateString : string) : Coordinates

  + ToPositionString(coordinates : Coordinates, direction : Direction) : string
}

class PositionStringConverter
{
  + IsValidPositionString(position : string) : bool
  + IsValidCoordinateString(coordinateString : string) : bool

  + ToCoordinatesDirection(position : string) : (Coordinates, Direction)
  + ToCoordinates(coordinateString : string) : Coordinates

  + ToPositionString(coordinates : Coordinates, direction : Direction) : string
}

abstract VehicleBase <<abstract>>
{
  - coordinates : Coordinates
  - direction : Direction
  - plateau : PlateauBase
  - instructionReader : IInstructionReader
  - positionStringConverter : IPositionStringConverter

  + VehicleBase(initialPosition : string, plateau : PlateauBase, positionStringConverter : IPositionStringConverter)
  + VehicleBase(initialPosition : string, plateau : PlateauBase)

  + SwapInstructionReader(instructionReader : IInstructionReader) : void
  + SwapPositionStringConverter(positionStringConverter : IPositionStringConverter) : void
  
  + GetPosition() : string
  + ApplyMoveInstruction(instruction : string) : void
  + TeleportToPosition(position : string) : void
}

class Rover
{
  + Rover(initialPosition : string, plateau : PlateauBase, positionStringConverter : IPositionStringConverter)
  + Rover(initialPosition : string, plateau : PlateauBase)

  + TakePhotoAndSendToStation() : void
  + CollectSample() : void
}

IInstructionReader -> SingularInstruction
IInstructionReader <|.. StandardInstructionReader 
PlateauBase <|-- RectangularPlateau

IPositionStringConverter <|.. PositionStringConverter

VehicleBase <|-r- Rover

PlateauBase --> Coordinates
Direction --> Coordinates
IPositionStringConverter --> Coordinates
IPositionStringConverter --> Direction

VehicleBase o-- Coordinates
VehicleBase o-- Direction
VehicleBase o--- PlateauBase
VehicleBase o-l IInstructionReader
VehicleBase o-- IPositionStringConverter

VehicleBase --> SingularInstruction

@enduml